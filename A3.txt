Currently, tech-leaders are shifting from a monolithic architecture to microservices. In a monolithic architecture, the full-stack (or pipeline) is developed on a single base, whereas a microservice uses a different base for each component. As a monolithic architecture aggregates all components in a single base, it is often more accessible to debugging, caching, logging, monitoring, debugging, and testing the overall codebase. Besides, it is also easier to develop and deploy the full codebase. However, when the codebase becomes enormous, developers often struggle to understand, make changes (or upgrading), and scale the structure.

On the contrary, microservice architecture solves the aforementioned issues. A microservice implements each component independently. Therefore it is easier to scale and understand each component. Further, microservice features are more accessible in shifting technology and often achieve a higher level of agility. But, microservices are prone to be complicated due to distributed architecture and databases. 

As both architectures have their pros and cons, each of them should be selected based on some observations. A monolithic architecture should be focused if the dev-team is small, the project is simple (and small), and concentrating on quick launch. On the contrary, a microservice architecture should be focused when the project is complex, may require scaling in the near future, and the dev-team comprises microservice expertise.
